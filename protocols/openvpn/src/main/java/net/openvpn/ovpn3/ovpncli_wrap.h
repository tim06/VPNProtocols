/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_ovpncli_WRAP_H_
#define SWIG_ovpncli_WRAP_H_

class SwigDirector_ClientAPI_OpenVPNClient : public openvpn::ClientAPI::OpenVPNClient, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ClientAPI_OpenVPNClient(JNIEnv *jenv);
    virtual bool tun_builder_new();
    virtual bool tun_builder_set_layer(int layer);
    virtual bool tun_builder_set_remote_address(std::string const &address,bool ipv6);
    virtual bool tun_builder_add_address(std::string const &address,int prefix_length,std::string const &gateway,bool ipv6,bool net30);
    virtual bool tun_builder_set_route_metric_default(int metric);
    virtual bool tun_builder_reroute_gw(bool ipv4,bool ipv6,unsigned int flags);
    virtual bool tun_builder_add_route(std::string const &address,int prefix_length,int metric,bool ipv6);
    virtual bool tun_builder_exclude_route(std::string const &address,int prefix_length,int metric,bool ipv6);
    virtual bool tun_builder_add_dns_server(std::string const &address,bool ipv6);
    virtual bool tun_builder_add_search_domain(std::string const &domain);
    virtual bool tun_builder_set_mtu(int mtu);
    virtual bool tun_builder_set_session_name(std::string const &name);
    virtual bool tun_builder_add_proxy_bypass(std::string const &bypass_host);
    virtual bool tun_builder_set_proxy_auto_config_url(std::string const &url);
    virtual bool tun_builder_set_proxy_http(std::string const &host,int port);
    virtual bool tun_builder_set_proxy_https(std::string const &host,int port);
    virtual bool tun_builder_add_wins_server(std::string const &address);
    virtual bool tun_builder_set_allow_family(int af,bool allow);
    virtual bool tun_builder_set_adapter_domain_suffix(std::string const &name);
    virtual int tun_builder_establish();
    virtual bool tun_builder_persist();
    virtual std::vector< std::string > const tun_builder_get_local_networks(bool ipv6);
    virtual void tun_builder_establish_lite();
    virtual void tun_builder_teardown(bool disconnect);
    virtual ~SwigDirector_ClientAPI_OpenVPNClient();
    virtual bool socket_protect(int socket,std::string remote,bool ipv6);
    virtual bool pause_on_connection_timeout();
    virtual void event(openvpn::ClientAPI::Event const &arg0);
    virtual void log(openvpn::ClientAPI::LogInfo const &arg0);
    virtual void external_pki_cert_request(openvpn::ClientAPI::ExternalPKICertRequest &arg0);
    virtual void external_pki_sign_request(openvpn::ClientAPI::ExternalPKISignRequest &arg0);
    virtual bool remote_override_enabled();
    virtual void remote_override(openvpn::ClientAPI::RemoteOverride &arg0);
    virtual void clock_tick();
public:
    bool swig_overrides(int n) {
      return (n < 33 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<33> swig_override;
};


#endif
